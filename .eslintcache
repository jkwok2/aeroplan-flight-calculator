[{"/Users/imogenem/imogenem/aeroplan-flight-calculator/src/index.js":"1","/Users/imogenem/imogenem/aeroplan-flight-calculator/src/reportWebVitals.js":"2","/Users/imogenem/imogenem/aeroplan-flight-calculator/src/App.js":"3","/Users/imogenem/imogenem/aeroplan-flight-calculator/src/Components/DistanceDisplay.js":"4","/Users/imogenem/imogenem/aeroplan-flight-calculator/src/Components/InputTextField.js":"5","/Users/imogenem/imogenem/aeroplan-flight-calculator/src/Components/ClassDropdown.js":"6","/Users/imogenem/imogenem/aeroplan-flight-calculator/src/Components/ResetButton.js":"7","/Users/imogenem/imogenem/aeroplan-flight-calculator/src/Components/CostDisplay.js":"8","/Users/imogenem/imogenem/aeroplan-flight-calculator/src/Components/Map.js":"9","/Users/imogenem/imogenem/aeroplan-flight-calculator/src/Components/Calculator.js":"10"},{"size":500,"mtime":1610254613539,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1610254613539,"results":"13","hashOfConfig":"12"},{"size":1474,"mtime":1610275580396,"results":"14","hashOfConfig":"12"},{"size":398,"mtime":1610280504612,"results":"15","hashOfConfig":"12"},{"size":1076,"mtime":1610280565045,"results":"16","hashOfConfig":"12"},{"size":689,"mtime":1610275706385,"results":"17","hashOfConfig":"12"},{"size":526,"mtime":1610269964493,"results":"18","hashOfConfig":"12"},{"size":1323,"mtime":1610304459848,"results":"19","hashOfConfig":"12"},{"size":832,"mtime":1610269964492,"results":"20","hashOfConfig":"12"},{"size":9936,"mtime":1610304411161,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"uidcic",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"45","messages":"46","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"24"},"/Users/imogenem/imogenem/aeroplan-flight-calculator/src/index.js",[],["48","49"],"/Users/imogenem/imogenem/aeroplan-flight-calculator/src/reportWebVitals.js",[],"/Users/imogenem/imogenem/aeroplan-flight-calculator/src/App.js",[],"/Users/imogenem/imogenem/aeroplan-flight-calculator/src/Components/DistanceDisplay.js",["50"],"import React, {Component} from 'react'\nimport TextField from '@material-ui/core/TextField';\nimport Calculator from './Calculator'\n\nclass DistanceDisplay extends Component {\n  \n\n    render(){\n        return (  \n            //placeholder - not necessary\n            <TextField id=\"outlined-basic\" label=\"Distance to location\" variant=\"outlined\" />\n\n        )\n    }\n}\n\nexport default DistanceDisplay;\n","/Users/imogenem/imogenem/aeroplan-flight-calculator/src/Components/InputTextField.js",["51","52"],"import React, {Component} from 'react'\nimport Calculator from './Calculator'\n\n\nclass InputTextField extends React.Component {\n\n        constructor(props) {\n          super(props);\n          this.state = {value: 'coconut'};\n          this.handleChange = this.handleChange.bind(this);\n          this.handleSubmit = this.handleSubmit.bind(this);\n        }\n      \n        // code to signal there is an issue with the input\n        handleChange(event) {    this.setState({value: event.target.value});  }\n        handleSubmit(event) {\n          alert('Sad. Those are invalid airports! Please re-enter airports');\n          event.preventDefault();\n        }\n      \n        render() {\n          return (\n           \n            <form onSubmit={this.handleSubmit}>\n          \n           <textarea name=\"textarea\"\n            rows=\"5\" cols=\"30\"\n            placeholder=\"Enter airports here in the following format: YVR-FRA-LAX\"></textarea>\n\n            <input type=\"submit\" value=\"Submit\" />\n          </form>\n\n          );\n           \n        }\n      }\n\nexport default InputTextField;\n","/Users/imogenem/imogenem/aeroplan-flight-calculator/src/Components/ClassDropdown.js",["53","54"],"import React, {Component} from 'react'\nimport Calculator from './Calculator'\n\nclass ClassDropdown extends Component {\n  \n    constructor(props) {\n        super(props);\n      \n      }\n   \n      render() {\n        return (\n          <form onSubmit={this.handleSubmit}>\n            <label>\n              Flight Class  \n              <select>          \n                <option value=\"economy\">Economy</option>\n                <option value=\"business\">Business</option>\n                <option value=\"first\">First</option>\n              </select>\n            </label>\n            <input type=\"submit\" value=\"Submit\" />\n          </form>\n        );\n      }\n    }\n\n\nexport default ClassDropdown;\n","/Users/imogenem/imogenem/aeroplan-flight-calculator/src/Components/ResetButton.js",[],"/Users/imogenem/imogenem/aeroplan-flight-calculator/src/Components/CostDisplay.js",["55"],"import React, {Component} from 'react'\nimport TextField from '@material-ui/core/TextField';\nimport Calculator from './Calculator'\n\nclass CostDisplay extends Component {\n  \n    constructor (props) {\n        super();\n        this.state = {\n          data : this.props.dataParentToChild\n        }\n        // instantiate Calculator:\n        // var calc = new Calculator();\n      \n      render() {\n\n        const {data} = this.state;\n\n        return (\n\n          <div>\n            {data}\n          </div>\n\n          // Code from tutorial on outputting text from a textfield\n          // <React.Fragment>\n          //   { /* handleChange() is called*/ }\n          //   <form onSubmit={this.handleChange}>\n          //   </form>\n          //   { /* Render output */}\n          //   <p>Total cost: {this.state.input}</p>\n          // </React.Fragment>\n        );\n      }\n    }\n\nexport default CostDisplay;\n\n\n     // Code from tutorial on outputting text from a textfield\n        // this.publish = this.publish.bind(this);\n        // this.handleChange = this.handleChange.bind(this);\n      }\n    \n      // Code from tutorial on outputting text from a textfield\n      // handleChange = event => {\n      //   const value = event.target.value;\n      //   this.setState({\n      //     input: calc.totalPrice()\n      //   });\n      // };","/Users/imogenem/imogenem/aeroplan-flight-calculator/src/Components/Map.js",[],"/Users/imogenem/imogenem/aeroplan-flight-calculator/src/Components/Calculator.js",["56"],"const airportData = require('../resources/airports.json');\nconst countries = require('../resources/countries.json');\nconst ATAT = require('../resources/awardchartATAT.json');\nconst ATPA = require('../resources/awardchartATPA.json');\nconst ATSA = require('../resources/awardchartATSA.json');\nconst NAAT = require('../resources/awardchartNAAT.json');\nconst NANA = require('../resources/awardchartNANA.json');\nconst NAPA = require('../resources/awardchartNAPA.json');\nconst NASA = require('../resources/awardchartNASA.json');\nconst PAPA = require('../resources/awardchartPAPA.json');\nconst PASA = require('../resources/awardchartPASA.json');\nconst SASA = require('../resources/awardchartSASA.json');\n\nclass Calculator {\n\n    // previous constructor at bottom of file\n    constructor (cityArr) {\n        // this.inputString = inputString\n        // this.cos = cos\n        this.cityArr = []\n        this.distances = []\n        this.originZone;\n        this.destZone;\n    }\n\n//Imo commenting these out, these should be covered by the constructor?\n// let inputString = \"YVR-YYZ-ZRH\"; // from form;\n// let cos = \"j\" // from form\n// let cityArr = [];\n// let distances = [];\n// let originZone; \n// let destZone;\n\n// inputs from user\nvar inputString = window.prompt(\"Enter airport codes\");\nvar cos = window.prompt(\"Enter cos\");  // does not appear to be used in this file\n\nconst splitString = (inputString) => {\n    cityArr = inputString.split(\"-\");\n}\n\n// Use Haversine Function to calculate distance\nconst calculateDistance = (origLong, origLat, destLong, destLat) => {\n    const earthRadiusMiles = 3958.756  //miles (6371  km)\n\n    let distLat = toRadians(destLat - origLat);    \n    let distLong = toRadians(destLong - origLong);\n\n    let sin2Lat = Math.sin(distLat / 2) * Math.sin(distLat / 2);\n    let sin2Long = Math.sin(distLong / 2) * Math.sin(distLong / 2);\n    let cosOLat = Math.cos(toRadians(origLat))\n    let cosdLat = Math.cos(toRadians(destLat))\n\n    let b = sin2Lat + (sin2Long * cosOLat * cosdLat);\n    let c = 2 * Math.asin(Math.sqrt(b));\n    return Math.round(earthRadiusMiles * c);\n}\n\n// helper function to convert degrees to radians\nfunction toRadians(degrees) {\n    return degrees * Math.PI / 180;\n    \n}\n\nconst totalDistance = (distances) => {\n    let result = 0;\n    for (let i = 0; i < distances.length; i++) {\n        result += distances[i];\n    }\n    return result;\n}\n\nconst distInArray = (cityArr) => {\n    for (let i = 0; i < cityArr.length - 1; i++) {\n        distances.push(calculateDistance(airportData[cityArr[i]].long, airportData[cityArr[i]].lat, airportData[cityArr[i+1]].long, airportData[cityArr[i+1]].lat));       \n    }\n}\n\nconst calcRegion = (country) => {\n    if (countries[country] === \"North America\") {\n        return \"NA\"\n    } else if (countries[country] === \"Europe\") {\n        return \"AT\"\n    } else if (countries[country] === \"Africa\") {\n        return \"AT\"\n    } else if (countries[country] === \"South America\") {\n        return \"SA\"\n    } else if (countries[country] === \"Oceania\") {\n        return \"PA\"\n    } else if (countries[country] === \"Asia\") {\n        return \"PA\"\n    } else if (countries[country] === \"Atlantic\") {\n        return \"AT\"\n    }\n}\n\nconst calcZone = (cityArr) => {\n    let originCountry = airportData[cityArr[0]].location;\n    let destCountry = airportData[cityArr[cityArr.length - 1]].location\n    let originZone = calcRegion(originCountry);\n    let destZone = calcRegion(destCountry);\n    return originZone + destZone\n}\n\nconst distToBand = (zone, dist) => {\n    switch (zone) {\n        case \"ATAT\":\n            if (0 <= dist && dist <= 1000) {\n                return \"band1\"\n            } else if (1001 <= dist && dist <= 2000) {\n                return \"band2\"\n            } else if (2001 <= dist && dist <= 4000) {\n                return \"band3\"\n            } else if (4001 <= dist && dist <= 6000) {\n                return \"band4\"\n            } else if (6001 <= dist) {\n                return \"band5\"\n            } \n        case \"ATPA\":\n            if (0 <= dist && dist <= 5000) {\n                return \"band1\"\n            } else if (5001 <= dist && dist <= 7000) {\n                return \"band2\"\n            } else if (7001 <= dist) {\n                return \"band3\"\n            }\n        case \"ATSA\":\n            if (0 <= dist && dist <= 7000) {\n                return \"band1\"\n            } else if (7001 <= dist) {\n                return \"band2\"\n            }\n        case \"NAAT\":\n            if (0 <= dist && dist <= 4000) {\n                return \"band1\"\n            } else if (4001 <= dist && dist <= 6000) {\n                return \"band2\"\n            } else if (6001 <= dist && dist <= 8000) {\n                return \"band3\";\n            } else if (8001 <= dist){\n                return \"band4\";\n            }\n        case \"NANA\":\n            if (0 <= dist && dist <= 500) {\n                return \"band1\";\n            } else if (501 <= dist && dist <= 1500){\n                return \"band2\";\n            } else if (1501 <= dist && dist <= 2750) {\n                return \"band3\";\n        \n            } else if (2751 <= dist) {\n                return \"band4\";\n            }\n        case \"NAPA\":\n            if (0 <= dist && dist <= 5000) {\n                return \"band1\";\n            } else if (5001 <= dist && dist <= 7500) {\n                return \"band2\";\n            } else if (7501 <= dist && dist <= 11000) {\n                return \"band3\";\n            } else if (11001 <= dist) {\n                return \"band4\";\n            }\n\n        case \"NASA\":\n            if (0 <= dist && dist <= 4500) {\n                return \"band1\";\n            } else if (4501 <= dist) {\n                return \"band2\";\n            }\n        \n        case \"PAPA\":\n            if (0 <= dist && dist <= 1000) {\n                return \"band1\"\n            } else if (1001 <= dist && dist <= 2000) {\n                return \"band2\"\n            } else if (2001 <= dist && dist <= 5000) {\n                return \"band3\"\n            } else if (5001 <= dist && dist <= 7000) {\n                return \"band4\"\n            } else if (7000 <= dist) {\n                return \"band5\"\n            } \n        case \"PASA\":\n            if (0 <= dist && dist <= 11000) {\n                return \"band1\"\n            } else if (11000 <= dist) {\n                return \"band2\"\n            }\n        case \"SASA\":\n            return \"band1\"\n        \n    }\n}\n\nconst totalPrice = (zone, band, cos) => {\n    switch (zone) {\n        case \"ATAT\":\n            if (cos === \"e\") {\n                return ATAT[band].economy\n            } else if (cos == \"j\") {\n                return ATAT[band].business\n            } else if (cos == \"f\") {\n                return ATAT[band].first\n            }\n        case \"ATPA\":\n            if (cos === \"e\") {\n                return ATAT[band].economy\n            } else if (cos == \"j\") {\n                return ATAT[band].business\n            } else if (cos == \"f\") {\n                return ATAT[band].first\n            }\n        case \"ATSA\":\n            if (cos === \"e\") {\n                return ASAS[band].economy\n            } else if (cos == \"j\") {\n                return ASAS[band].business\n            } else if (cos == \"f\") {\n                return ASAS[band].first\n            }\n        case \"NAAT\":\n            if (cos === \"e\") {\n                return NAAT[band].economy\n            } else if (cos == \"j\") {\n                return NAAT[band].business\n            } else if (cos == \"f\") {\n                return NAAT[band].first\n            }\n        case \"NANA\":\n            if (cos === \"e\") {\n                return NANA[band].economy\n            } else if (cos == \"j\") {\n                return NANA[band].business\n            } else if (cos == \"f\") {\n                return NANA[band].first\n            }\n        case \"NAPA\":\n            if (cos === \"e\") {\n                return NAPA[band].economy\n            } else if (cos == \"j\") {\n                return NAPA[band].business\n            } else if (cos == \"f\") {\n                return NAPA[band].first\n            }\n        case \"NASA\":\n            if (cos === \"e\") {\n                return NASA[band].economy\n            } else if (cos == \"j\") {\n                return NASA[band].business\n            } else if (cos == \"f\") {\n                return NASA[band].first\n            }        \n        case \"PAPA\":\n            if (cos === \"e\") {\n                return PAPA[band].economy\n            } else if (cos == \"j\") {\n                return PAPA[band].business\n            } else if (cos == \"f\") {\n                return PAPA[band].first\n            }\n        case \"PASA\":\n            if (cos === \"e\") {\n                return PASA[band].economy\n            } else if (cos == \"j\") {\n                return PASA[band].business\n            } else if (cos == \"f\") {\n                return PASA[band].first\n            }\n        case \"SASA\":\n            if (cos === \"e\") {\n                return SASA[band].economy\n            } else if (cos == \"j\") {\n                return SASA[band].business\n            } else if (cos == \"f\") {\n                return SASA[band].first\n            }\n            // add default - error\n            //also need breaks\n    }\n}\n\n}\n\n\n// testing:\n\n// yvr-yyz-zrh\n// [yvr, yyz, zrh]\n// [2079, 4033]\n// [5000]\n\n// splitString(inputString)\n// console.log(cityArr)\n// distInArray(cityArr)\n// console.log(distances)\n// testTotalDistance = totalDistance(distances)\n// console.log(testTotalDistance)\n// var testZone = calcZone(cityArr)\n// console.log(testZone)\n// var testBand = distToBand(testZone, testTotalDistance)\n// console.log(testBand)\n// var testTotalPrice = totalPrice(testZone, testBand, \"j\")\n// console.log(testTotalPrice)\n\n   // previous constructor\n    // constructor (inputString, cos) {\n        // this.inputString = inputString\n        // this.cos = cos\n        // this.cityArr = []\n        // this.distances = []\n        // this.originZone;\n        // this.destZone;\n    // }",{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":3,"column":8,"nodeType":"63","messageId":"64","endLine":3,"endColumn":18},{"ruleId":"61","severity":1,"message":"65","line":1,"column":16,"nodeType":"63","messageId":"64","endLine":1,"endColumn":25},{"ruleId":"61","severity":1,"message":"62","line":2,"column":8,"nodeType":"63","messageId":"64","endLine":2,"endColumn":18},{"ruleId":"61","severity":1,"message":"62","line":2,"column":8,"nodeType":"63","messageId":"64","endLine":2,"endColumn":18},{"ruleId":"66","severity":1,"message":"67","line":6,"column":5,"nodeType":"68","messageId":"69","endLine":9,"endColumn":8},{"ruleId":null,"fatal":true,"severity":2,"message":"70","line":16,"column":16},{"ruleId":null,"fatal":true,"severity":2,"message":"71","line":35,"column":5},"no-native-reassign",["72"],"no-negated-in-lhs",["73"],"no-unused-vars","'Calculator' is defined but never used.","Identifier","unusedVar","'Component' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","Parsing error: Unexpected token, expected \";\"\n\n\u001b[0m \u001b[90m 14 | \u001b[39m      \u001b[0m\n\u001b[0m \u001b[90m 15 | \u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 16 | \u001b[39m      render() {\u001b[0m\n\u001b[0m \u001b[90m    | \u001b[39m               \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 17 | \u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 18 | \u001b[39m        \u001b[36mconst\u001b[39m {data} \u001b[33m=\u001b[39m \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mstate\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 19 | \u001b[39m\u001b[0m","Parsing error: Unexpected token\n\n\u001b[0m \u001b[90m 33 | \u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 34 | \u001b[39m\u001b[90m// inputs from user\u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 35 | \u001b[39m\u001b[36mvar\u001b[39m inputString \u001b[33m=\u001b[39m window\u001b[33m.\u001b[39mprompt(\u001b[32m\"Enter airport codes\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m    | \u001b[39m    \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 36 | \u001b[39m\u001b[36mvar\u001b[39m cos \u001b[33m=\u001b[39m window\u001b[33m.\u001b[39mprompt(\u001b[32m\"Enter cos\"\u001b[39m)\u001b[33m;\u001b[39m  \u001b[90m// does not appear to be used in this file\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 37 | \u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 38 | \u001b[39m\u001b[36mconst\u001b[39m splitString \u001b[33m=\u001b[39m (inputString) \u001b[33m=>\u001b[39m {\u001b[0m","no-global-assign","no-unsafe-negation"]